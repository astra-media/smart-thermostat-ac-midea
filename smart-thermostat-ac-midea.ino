#include "arduino_secrets.h"
#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/dcedce49-dae5-4953-9a9f-c43fedffbba1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudDimmedLight blinds;
  CloudSwitch airCon;
  CloudSwitch fan;
  CloudTemperatureSensor temperature;
  CloudTemperatureSensor thermostat;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/


#include "thingProperties.h"
#include "DHT.h"

#include <Arduino.h>
#include <IRremoteESP8266.h>
#include <IRsend.h>

#include <IRac.h>
#include <IRutils.h>
#include <ir_Midea.h>


// const uint16_t kIrLed = 4;  // ESP8266 GPIO pin to use. Recommended: 4 (D2).
// IRsend irsend(kIrLed);  // Set the GPIO to be used to sending the message.

IRsend irsend(4);           // Replace 4 with your GPIO pin

IRMideaAC ac(4);  // Use your IR GPIO pin (e.g., GPIO 4 for D2)

/*
 The circuit:
 * LCD RS pin to digital pin 12 myEdit: 18
 * LCD Enable pin to digital pin 11 myEdit: 19
 * LCD D4 pin to digital pin 5  myEdit: 21
 * LCD D5 pin to digital pin 4  myEdit: 22
 * LCD D6 pin to digital pin 3  myEdit: 23
 * LCD D7 pin to digital pin 2  myEdit: 25
 * LCD R/W pin to ground
 * 10K resistor:
 * ends to +5V and ground
 * wiper to LCD VO pin (pin 3)
*/
#include <LiquidCrystal.h>
const int rs = 18, en = 19, d4 = 21, d5 = 22, d6 = 23, d7 = 25;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

#define DHTPIN 32     // Digital pin connected to the DHT sensor
#define DHTTYPE DHT11 
DHT dht(DHTPIN, DHTTYPE);

#define TEMP_UP_PIN 16  // the number of the TEMP_UP_PIN
#define TEMP_DOWN_PIN 17
#define AIRCON_SWITCH_PIN 34
#define PHOTORESISTOR_PIN 36

#define LED_PIN 2

bool airConSwitch = false;

int setTemp = 75;

int getTemp = 60;

int airConOnValue = 1900;

TaskHandle_t Task1; //task1 is going to be used for the core 1

//millis for LCD
unsigned long previousMillis = 0;
const long refreshInterval = 450; // time between display refresh in ms

//millis for Temperature Sensor
unsigned long previousMillisForTempSensor = 0;
const long refreshIntervalForTempSensor = 2000; // time between temperature refresh in ms


bool sendIrforAcPower = false;
bool sendIrforAcTemp = false;

//millis for for setSesonrTemp (FollowME)
unsigned long pMillisSetSesonrTemp = 0;
const long refreshIntSetSesonrTemp = 120000; //2 minutes: time between setSesonrTemp (followMe)


//Away Mood setting
bool awayMoodActive = false;
bool awayMoodON = false;
int maxTemp = 95;


void setup() {
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

    // Initialize serial and wait for port to open:
  Serial.begin(115200);
  //set the resolution to 12 bits (0-4096)
  analogReadResolution(12);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // initialize the pushbutton pin as an input:
  pinMode(TEMP_UP_PIN, INPUT);
  pinMode(TEMP_DOWN_PIN, INPUT);
  pinMode(AIRCON_SWITCH_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);

  dht.begin();

  irsend.begin();
  ac.begin();

  lcd.begin(16, 2);

  /*create a task that will be executed in the Task1code() function, with priority 1 and executed on core 1
  (Priority values start at 0, in which 0 is the lowest priority. The processor will run the tasks with higher priority first)
  */

  xTaskCreatePinnedToCore(
                  Task1code,   /* Task function. */
                  "Task1",     /* name of task. */
                  10000,       /* Stack size of task */
                  NULL,        /* parameter of the task */
                  1,           /* priority of the task */
                  &Task1,      /* Task handle to keep track of created task */
                  1);          /* pin task to core 0 */                  
  delay(500);
}

//Task1code:
void Task1code( void * pvParameters ){
  Serial.print("Task1 running on core ");
  Serial.println(xPortGetCoreID());

  //The for(;;) creates an infinite loop. So, this function runs similarly to the loop() function. You can use it as a second loop in your code
  for(;;){
    ArduinoCloud.update();

    if(millis() - previousMillisForTempSensor >= refreshIntervalForTempSensor){
      previousMillisForTempSensor = millis();

      updateACState();
      getTempfromDHT();

      if (!airConSwitch && setTemp <= (maxTemp + 5) && setTemp >= (maxTemp - 5)){
        awayMood();
        awayMoodActive = true;
      } else {
        awayMoodActive = false;
      }

      if(ArduinoCloud.connected() == 1){
        temperature = getTemp;
      }
    }

    //send sensor temp (followME)
    if(airConSwitch && millis() - pMillisSetSesonrTemp >= refreshIntSetSesonrTemp){
      pMillisSetSesonrTemp = millis();
      sendSensorTemp();
    }

    delay(1000);
  } 
}

//Arduino sketches run on core 1 by default. So, you could write the code for Task2 in the loop() (there is no need to create another task)
void loop() {
  // Your code here 
  setAirConButtons();

  if(millis() - previousMillis >= refreshInterval){
    previousMillis = millis();
    setLCD();
  }

  delay(50);
}

/*
  Since AirCon is READ_WRITE variable, onAirConChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAirConChange()  {
  // Add your code here to act upon AirCon change
  if(airCon){
    airConSwitch = true;
  } else if (ArduinoCloud.connected() == 1 && !airCon){
    airConSwitch = false;
  }
  Serial.println(airCon);
  sendIrforAcPower = true;
}

/*
  Since Thermostat is READ_WRITE variable, onThermostatChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onThermostatChange()  {
  // Add your code here to act upon Thermostat change
  if(thermostat <= 62){
    setTemp = 62;
  } else if (thermostat >= 99){
    setTemp = 99;
  } else {
    setTemp = int(thermostat);
  }
  Serial.println(thermostat);
  if(airConSwitch){
    sendIrforAcTemp = true;
  }
}


/*
  Since Blinds is READ_WRITE variable, onBlindsChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onBlindsChange()  {
  // Add your code here to act upon Blinds change
    int blindPosition = int(blinds.getBrightness() +1);
    // Serial.println(blindPosition);
    Serial.println("Sending IR");

    if(blindPosition < 25){
      Serial.println(blindPosition);
      Serial.println("Fully closing blinds");
      irsend.sendNEC(0xFF6897);
      delay(200);
      irsend.sendNEC(0xFF6897);
      delay(200);
      irsend.sendNEC(0xFF6897);
      return;
    }

    if(blindPosition >= 25 && blindPosition < 50){
      Serial.println(blindPosition);
      Serial.println("Closing blinds");
      irsend.sendNEC(0xFF30CF);
      delay(200);
      irsend.sendNEC(0xFF30CF);
      delay(200);
      irsend.sendNEC(0xFF30CF);
      return;
    }

    if(blindPosition >= 50 && blindPosition < 75){
      Serial.println(blindPosition);
      Serial.println("Opening blinds");
      irsend.sendNEC(0xFF18E7);
      delay(200);
      irsend.sendNEC(0xFF18E7);
      delay(200);
      irsend.sendNEC(0xFF18E7);
      return;
    }

    if(blindPosition >= 75){
      Serial.println(blindPosition);
      Serial.println("Fully opening blinds");
      irsend.sendNEC(0xFF7A85);
      delay(200);
      irsend.sendNEC(0xFF7A85);
      delay(200);
      irsend.sendNEC(0xFF7A85);
      return;
    }
}

/*
  Since Fan is READ_WRITE variable, onFanChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onFanChange()  {
  // Add your code here to act upon Fan change
  if (fan){
    Serial.println("Fan On");
      Serial.println("Sending IR");
      irsend.sendNEC(0xFFA25D);
      delay(200);
      irsend.sendNEC(0xFFA25D);
      delay(200);
      irsend.sendNEC(0xFFA25D);
  } else if (!fan){
    Serial.println("Fan Off");
    Serial.println("Sending IR");
    irsend.sendNEC(0xFFE21D);
    delay(200);
    irsend.sendNEC(0xFFE21D);
    delay(200);
    irsend.sendNEC(0xFFE21D);
  }
}


void setAirConButtons () {
  // read the state of the pushbutton value:
  int tempUpButtonState = digitalRead(TEMP_UP_PIN);
  int tempDownButtonState = digitalRead(TEMP_DOWN_PIN);
  int acButtonState = digitalRead(AIRCON_SWITCH_PIN);

  if (tempUpButtonState == HIGH){
    if(setTemp >= 99){
      setTemp = 99;
      setLCD();
      if(ArduinoCloud.connected() == 1){
        thermostat = setTemp;
      }

    }else {
      setTemp ++;
      setLCD();
      if(ArduinoCloud.connected() == 1){
        thermostat = setTemp;
      }
    }

    if(airConSwitch){
      sendIrforAcTemp = true;
    }
    delay(450);
  } else if (tempDownButtonState == HIGH){
    if(setTemp <= 62){
      setTemp = 62;
      setLCD();
      if (ArduinoCloud.connected() == 1) {
        thermostat = setTemp;
      }
    }else {
      setTemp --;
      setLCD();
      if (ArduinoCloud.connected() == 1) {
        thermostat = setTemp;
      }
    }

    if(airConSwitch){
      sendIrforAcTemp = true;
    }
    delay(450);
  } else if (acButtonState == HIGH){
    airConSwitch = !airConSwitch;
    setLCD();
    if (ArduinoCloud.connected() == 1) {
      airCon = airConSwitch;
    }
    sendIrforAcPower = true;
    delay(450);
  }
}


void getTempfromDHT () {
  // Read temperature as Fahrenheit (isFahrenheit = true)
  float f = dht.readTemperature(true);

 // Check if any reads failed and exit early (to try again).
  if (isnan(f)) {
    Serial.println(F("Failed to read from DHT sensor!"));
    return;
  }

  // Read temperature as Fahrenheit (isFahrenheit = true)
  getTemp = f;
}


void setLCD () {
  lcd.clear();

  //Current Temperature Value
  lcd.setCursor(0,0); 
  lcd.print("Temp ");
  lcd.print(getTemp);
  lcd.print((char)223);

  //Set Temperature Value
  lcd.print("Set ");
  lcd.print(setTemp);
  lcd.print((char)223);

  lcd.setCursor(0,1);
  if(airConSwitch) {
    lcd.print("AC: ON; ");
  } else {
    lcd.print("AC: OFF; ");
  }
  if (awayMoodActive){
    lcd.print("Away M.");
  }
}

//Update AC State
void updateACState(){
  if(sendIrforAcPower){
    setAcPower(airConSwitch);
    sendIrforAcPower = false;
  } else if (sendIrforAcTemp){
    setAcTemp();
    sendIrforAcTemp = false;
  }
}

//Turn ON/OFF AC
void setAcPower(bool acState) {
  ac.setPower(acState);
  ac.setMode(0);        // 0 = Cool
  ac.setFan(1);         // 1 = Low fan
  if(setTemp >= 86){
    ac.setTemp(86);
  } else {
    ac.setTemp(setTemp);
  }
  ac.send();
  delay(20);           // Retry with good delay
  ac.send();
  Serial.println("Updating AC Power State");
}

//Set Temperature on AC
void setAcTemp() {
  ac.setPower(airConSwitch);
  ac.setMode(0);        // 0 = Cool
  ac.setFan(1);         // 1 = Low fan
  if(setTemp >= 86){
    ac.setTemp(86);
  } else {
    ac.setTemp(setTemp);
  }
  ac.send();
  delay(20);           // Retry with good delay
  ac.send();

  Serial.println("Setting AC Temp");
}

//Send Sensor Temp (FollowMe)
void sendSensorTemp(){
  ac.setEnableSensorTemp(true);
  ac.setPower(airConSwitch);
  ac.setMode(0);        // 0 = Cool
  ac.setFan(1);         // 1 = Low fan
  if(setTemp >= 86){
    ac.setTemp(86);
  } else {    
    ac.setTemp(setTemp);
  }

  ac.setSensorTemp(getTemp);
  ac.send();
  ac.setEnableSensorTemp(false);
  Serial.print("Sending sensor temp: ");
  Serial.println(getTemp);
}


//Away Mood
void awayMood(){
  if((getTemp >= maxTemp) && !awayMoodON){
    ac.setPower(true);
    ac.setMode(0);        // 0 = Cool
    ac.setFan(1);         // 1 = Low fan
    ac.setTemp(86);       // Set temp to 86
    ac.send();
    delay(20);           // Retry with delay
    ac.send();
    delay(20);           // Retry with delay
    ac.send();
    awayMoodON = true;
    Serial.println("Turning On Away Mood");
  } else if ((getTemp <= (maxTemp - 4)) && awayMoodON){
    ac.setPower(false);
    ac.setMode(0);        // 0 = Cool
    ac.setFan(1);         // 1 = Low fan
    ac.setTemp(86);       // Set temp to 86
    ac.send();
    delay(20);           // Retry with delay
    ac.send();
    delay(20);           // Retry with delay
    ac.send();
    awayMoodON = false;
    Serial.println("Turning OFF Away Mood");
  }
}